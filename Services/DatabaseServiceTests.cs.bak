using Microsoft.VisualStudio.TestTools.UnitTesting;
using RepairShopBilling.Models;
using RepairShopBilling.Services;
using System.IO;

namespace RepairShopBilling.Tests.Services;

[TestClass]
public class DatabaseServiceTests
{
    private DatabaseService _databaseService;
    private string _testDatabasePath;

    [TestInitialize]
    public async Task TestInitialize()
    {
        // Create a test database in temp directory
        var tempPath = Path.GetTempPath();
        var testFolder = Path.Combine(tempPath, "RepairShopBillingTests", Guid.NewGuid().ToString());
        Directory.CreateDirectory(testFolder);
        
        _testDatabasePath = Path.Combine(testFolder, "test.db");
        
        // Create a test instance with custom database path
        _databaseService = new DatabaseService(_testDatabasePath);
        await _databaseService.InitializeAsync();
    }

    [TestCleanup]
    public void TestCleanup()
    {
        // Clean up test database
        if (File.Exists(_testDatabasePath))
        {
            File.Delete(_testDatabasePath);
        }
        
        var testFolder = Path.GetDirectoryName(_testDatabasePath);
        if (Directory.Exists(testFolder))
        {
            Directory.Delete(testFolder, true);
        }
    }

    [TestMethod]
    public async Task InitializeAsync_ShouldCreateTables()
    {
        // Arrange & Act - Already done in TestInitialize
        
        // Assert - Verify tables exist by trying to query them
        var bills = await _databaseService.GetBillsAsync();
        var services = await _databaseService.GetAllServicesAsync();
        
        Assert.IsNotNull(bills);
        Assert.IsNotNull(services);
    }

    [TestMethod]
    public async Task SaveBillAsync_NewBill_ShouldReturnBillId()
    {
        // Arrange
        var bill = new Bill
        {
            CustomerName = "John Doe",
            DeviceType = "Laptop",
            Date = DateTime.Now,
            TotalAmount = 150.00m,
            Items = new List<BillItem>
            {
                new BillItem { Description = "RAM Upgrade", Quantity = 1, UnitPrice = 50.00m },
                new BillItem { Description = "Labor", Quantity = 2, UnitPrice = 50.00m }
            }
        };

        // Act
        var billId = await _databaseService.SaveBillAsync(bill);

        // Assert
        Assert.IsTrue(billId > 0);
        Assert.AreEqual(billId, bill.BillId);
    }

    [TestMethod]
    public async Task GetBillByIdAsync_ExistingBill_ShouldReturnBill()
    {
        // Arrange
        var originalBill = new Bill
        {
            CustomerName = "Jane Smith",
            DeviceType = "Desktop",
            Date = DateTime.Now,
            TotalAmount = 200.00m,
            Items = new List<BillItem>
            {
                new BillItem { Description = "Hard Drive", Quantity = 1, UnitPrice = 100.00m },
                new BillItem { Description = "Installation", Quantity = 1, UnitPrice = 100.00m }
            }
        };

        var billId = await _databaseService.SaveBillAsync(originalBill);

        // Act
        var retrievedBill = await _databaseService.GetBillByIdAsync(billId);

        // Assert
        Assert.IsNotNull(retrievedBill);
        Assert.AreEqual(originalBill.CustomerName, retrievedBill.CustomerName);
        Assert.AreEqual(originalBill.DeviceType, retrievedBill.DeviceType);
        Assert.AreEqual(originalBill.TotalAmount, retrievedBill.TotalAmount);
        Assert.AreEqual(originalBill.Items.Count, retrievedBill.Items.Count);
    }

    [TestMethod]
    public async Task GetBillByIdAsync_NonExistentBill_ShouldReturnNull()
    {
        // Act
        var bill = await _databaseService.GetBillByIdAsync(999);

        // Assert
        Assert.IsNull(bill);
    }

    [TestMethod]
    public async Task GetBillsAsync_ShouldReturnAllBills()
    {
        // Arrange
        var bill1 = new Bill
        {
            CustomerName = "Customer 1",
            DeviceType = "Laptop",
            Date = DateTime.Now.AddDays(-1),
            TotalAmount = 100.00m,
            Items = new List<BillItem> { new BillItem { Description = "Service 1", Quantity = 1, UnitPrice = 100.00m } }
        };

        var bill2 = new Bill
        {
            CustomerName = "Customer 2",
            DeviceType = "Desktop",
            Date = DateTime.Now,
            TotalAmount = 200.00m,
            Items = new List<BillItem> { new BillItem { Description = "Service 2", Quantity = 1, UnitPrice = 200.00m } }
        };

        await _databaseService.SaveBillAsync(bill1);
        await _databaseService.SaveBillAsync(bill2);

        // Act
        var bills = await _databaseService.GetBillsAsync();

        // Assert
        Assert.AreEqual(2, bills.Count);
        // Bills should be ordered by date descending (newest first)
        Assert.AreEqual("Customer 2", bills[0].CustomerName);
        Assert.AreEqual("Customer 1", bills[1].CustomerName);
    }

    [TestMethod]
    public async Task SearchBillsByCustomerAsync_ShouldReturnMatchingBills()
    {
        // Arrange
        var bill1 = new Bill
        {
            CustomerName = "John Doe",
            DeviceType = "Laptop",
            Date = DateTime.Now,
            TotalAmount = 100.00m,
            Items = new List<BillItem> { new BillItem { Description = "Service", Quantity = 1, UnitPrice = 100.00m } }
        };

        var bill2 = new Bill
        {
            CustomerName = "Jane Smith",
            DeviceType = "Desktop",
            Date = DateTime.Now,
            TotalAmount = 200.00m,
            Items = new List<BillItem> { new BillItem { Description = "Service", Quantity = 1, UnitPrice = 200.00m } }
        };

        var bill3 = new Bill
        {
            CustomerName = "John Johnson",
            DeviceType = "Tablet",
            Date = DateTime.Now,
            TotalAmount = 150.00m,
            Items = new List<BillItem> { new BillItem { Description = "Service", Quantity = 1, UnitPrice = 150.00m } }
        };

        await _databaseService.SaveBillAsync(bill1);
        await _databaseService.SaveBillAsync(bill2);
        await _databaseService.SaveBillAsync(bill3);

        // Act
        var searchResults = await _databaseService.SearchBillsByCustomerAsync("John");

        // Assert
        Assert.AreEqual(2, searchResults.Count);
        Assert.IsTrue(searchResults.Any(b => b.CustomerName == "John Doe"));
        Assert.IsTrue(searchResults.Any(b => b.CustomerName == "John Johnson"));
        Assert.IsFalse(searchResults.Any(b => b.CustomerName == "Jane Smith"));
    }

    [TestMethod]
    public async Task SaveBillAsync_UpdateExistingBill_ShouldUpdateBill()
    {
        // Arrange
        var originalBill = new Bill
        {
            CustomerName = "Original Name",
            DeviceType = "Laptop",
            Date = DateTime.Now,
            TotalAmount = 100.00m,
            Items = new List<BillItem> { new BillItem { Description = "Original Service", Quantity = 1, UnitPrice = 100.00m } }
        };

        var billId = await _databaseService.SaveBillAsync(originalBill);

        // Modify the bill
        originalBill.CustomerName = "Updated Name";
        originalBill.TotalAmount = 200.00m;
        originalBill.Items.Clear();
        originalBill.Items.Add(new BillItem { Description = "Updated Service", Quantity = 2, UnitPrice = 100.00m });

        // Act
        var updatedBillId = await _databaseService.SaveBillAsync(originalBill);

        // Assert
        Assert.AreEqual(billId, updatedBillId);

        var retrievedBill = await _databaseService.GetBillByIdAsync(billId);
        Assert.IsNotNull(retrievedBill);
        Assert.AreEqual("Updated Name", retrievedBill.CustomerName);
        Assert.AreEqual(200.00m, retrievedBill.TotalAmount);
        Assert.AreEqual(1, retrievedBill.Items.Count);
        Assert.AreEqual("Updated Service", retrievedBill.Items[0].Description);
    }

    [TestMethod]
    public async Task SaveBillAsync_BillWithMultipleItems_ShouldSaveAllItems()
    {
        // Arrange
        var bill = new Bill
        {
            CustomerName = "Test Customer",
            DeviceType = "Laptop",
            Date = DateTime.Now,
            TotalAmount = 300.00m,
            Items = new List<BillItem>
            {
                new BillItem { Description = "RAM", Quantity = 2, UnitPrice = 50.00m },
                new BillItem { Description = "SSD", Quantity = 1, UnitPrice = 100.00m },
                new BillItem { Description = "Labor", Quantity = 2, UnitPrice = 50.00m }
            }
        };

        // Act
        var billId = await _databaseService.SaveBillAsync(bill);
        var retrievedBill = await _databaseService.GetBillByIdAsync(billId);

        // Assert
        Assert.IsNotNull(retrievedBill);
        Assert.AreEqual(3, retrievedBill.Items.Count);
        
        var ramItem = retrievedBill.Items.FirstOrDefault(i => i.Description == "RAM");
        Assert.IsNotNull(ramItem);
        Assert.AreEqual(2, ramItem.Quantity);
        Assert.AreEqual(50.00m, ramItem.UnitPrice);
        Assert.AreEqual(100.00m, ramItem.TotalPrice);
    }

    [TestMethod]
    public async Task SeedServiceCatalogAsync_ShouldPopulateServices()
    {
        // Act
        await _databaseService.SeedServiceCatalogAsync();
        var services = await _databaseService.GetAllServicesAsync();

        // Assert
        Assert.IsTrue(services.Count > 0);
        
        // Verify some key services exist
        Assert.IsTrue(services.Any(s => s.Category == "EQUIPMENT" && s.Name == "RAM"));
        Assert.IsTrue(services.Any(s => s.Category == "OS X" && s.Name == "Big Sur 11 (20)"));
        Assert.IsTrue(services.Any(s => s.Category == "LASER" && s.Name == "Materials"));
        Assert.IsTrue(services.Any(s => s.Category == "PHOTO PRINT" && s.Name == "B&W Print"));
    }

    [TestMethod]
    public async Task SeedServiceCatalogAsync_CalledTwice_ShouldNotDuplicate()
    {
        // Act
        await _databaseService.SeedServiceCatalogAsync();
        var firstCount = (await _databaseService.GetAllServicesAsync()).Count;
        
        await _databaseService.SeedServiceCatalogAsync();
        var secondCount = (await _databaseService.GetAllServicesAsync()).Count;

        // Assert
        Assert.AreEqual(firstCount, secondCount);
    }

    [TestMethod]
    public async Task GetServicesByCategoryAsync_ShouldReturnCategoryServices()
    {
        // Arrange
        await _databaseService.SeedServiceCatalogAsync();

        // Act
        var equipmentServices = await _databaseService.GetServicesByCategoryAsync("EQUIPMENT");
        var osxServices = await _databaseService.GetServicesByCategoryAsync("OS X");

        // Assert
        Assert.IsTrue(equipmentServices.Count > 0);
        Assert.IsTrue(osxServices.Count > 0);
        
        Assert.IsTrue(equipmentServices.All(s => s.Category == "EQUIPMENT"));
        Assert.IsTrue(osxServices.All(s => s.Category == "OS X"));
        
        // Verify specific items
        Assert.IsTrue(equipmentServices.Any(s => s.Name == "RAM"));
        Assert.IsTrue(equipmentServices.Any(s => s.Name == "Laptop"));
        Assert.IsTrue(osxServices.Any(s => s.Name == "Big Sur 11 (20)"));
    }

    [TestMethod]
    public async Task GetServiceCategoriesAsync_ShouldReturnAllCategories()
    {
        // Arrange
        await _databaseService.SeedServiceCatalogAsync();

        // Act
        var categories = await _databaseService.GetServiceCategoriesAsync();

        // Assert
        Assert.IsTrue(categories.Count > 0);
        Assert.IsTrue(categories.Contains("EQUIPMENT"));
        Assert.IsTrue(categories.Contains("OS X"));
        Assert.IsTrue(categories.Contains("LASER"));
        Assert.IsTrue(categories.Contains("PHOTO PRINT"));
        Assert.IsTrue(categories.Contains("HOURS"));
    }

    [TestMethod]
    public async Task UpdateServiceCatalogAsync_ShouldAddNewServices()
    {
        // Arrange
        await _databaseService.SeedServiceCatalogAsync();
        var initialCount = (await _databaseService.GetAllServicesAsync()).Count;

        // Manually add a service to simulate existing data
        var newService = new Service
        {
            Name = "Test Service",
            Price = 99.99m,
            Category = "TEST",
            IsActive = true
        };

        // We would need to add this service manually to test the update functionality
        // For now, just test that update doesn't break existing services

        // Act
        await _databaseService.UpdateServiceCatalogAsync();
        var finalCount = (await _databaseService.GetAllServicesAsync()).Count;

        // Assert
        Assert.AreEqual(initialCount, finalCount); // Should remain the same since no new services to add
    }
}